keep track of standard deviations of measurements... use it to understand
actuall interval accuracy

generate a script for error bars on the unprocessed lut (or whatever)

Master Plan:

Okay, so there's been some good ideas about how to expand on datapixx, but it's getting difficult to see the forest for the trees.

The overall goal is to move to distutils and provide a simple, platform independent means of distribution.

Within this there are two key aspects:

i) The various calibration scripts will all be accessible from a simple executable called 'hrl'. When one once to run a certain calibration, hrl calibrate gamma (params) will run the gamma script. hrl lut ... will access look up table generation functionality. The various subscripts are currently spread around the source, and must be gathered together. There are two approaches to this. 1) The various subscripts will be modules within the hrl hierarchy, which can be conveniently accessed by the master hrl script. 2) All the subscripts will be saved into e.g. /usr/bin and will be loaded by the hrl master script (also in /usr/bin) as required. The differences between these two approaches are minimal and I can't decide.

ii) As far as the hrl library is concerned, the code needs to be remodularized in a way which reflects the intended design. HRL itself should not contain any of the device drivers as such. Rather, it should only contain wrappers which create a common interface. That is, there will be hrl.graphics.datapixx and hrl.graphics.standard, which will export functions with the same names. Which one is actually imported will depend on 1) which one the user wants and 2) depending on the fact that the relavent python drivers have been installed.

So general hierarchy:

hrl.user
hrl.graphics.datapixx
hrl.graphics.gpu
hrl.input.responsepixx
hrl.input.keyboard
hrl.photometer.minolta
hrl.photometer.optical
hrl.clock.datapixx
hrl.clock.cpu

Each device group will export the same set of functions. At the same time, all non standard device modules (i.e. datapixx, minolta, and optical) will depend on the existence of seperate packages for each device. Key point here: We want to seperate out the datapixx wrapper into its own package.

Each submodule should be self contained - the graphics module should be able to
display images independent of the existence of hrl. Per module tests should
then be written. This is a good way to proceed.

hrl will just subclass the various modules as required - this can be done by
conditional import and then renaming the superclass to a common name.

---

I'd been working primarily on i) from above, but I'm having trouble settling on a solution. So I think I will need to focus on ii) first. Seperate out the functionality in the desired way, and then we can focus just on getting 'standard' and 'keyboard' working. Once that seems alright, then it will be time to wrap that up in distutils. Then I can decide how exactly I want to manage the scripts.


---

Bugs:
- If images are loaded containing black colours (0) they are displayed
incorrectly.
- Grayscale displaying of images on non datapixx enabled monitors is creating
green tinted images.
- Currently, images without an alpha channel cannot be handled by hrl.
- It seems as though image handling is slow when filenames are given to HRL as
opposed to numpy arrays. This would seem to be because the file is being loaded
inside of a loop in a way that it shouldn't be.
- In general, image (as opposed to array) handling is kind of borked at the moment, it seems.

Documentation:
- Better documentation of experiment and reviewing of current library
documentation. A general review/refactoring should probably be done.

Features:
- Add minolta photometer to HRL API
- Add the ability to draw text objects with HRL as well
- Allow a setting of minimum and maximum lookup table values, returning
maximum linear resolution, maybe with visualiziation and hints and such

Distribution:
- Develop new C wrapper.
- Repackage scripts. Either wrap the original scripts up as submodules, or copy them all
  into e.g. /usr/bin. Still can't decide which is best.

Tasks:
- Monitor tests?
